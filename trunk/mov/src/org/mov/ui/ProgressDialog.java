package org.mov.ui;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.Timer;
import java.util.*;
import org.mov.main.Main;

/**
 *
 * @author  Dan
 *
 * An extensive progress indicator dialog, similar to but more flexible than 
 * ProgressMonitor.  
 */
public class ProgressDialog extends javax.swing.JDialog implements ActionListener {

    // Any clients that wish to be informed immediately on dialog closed go here
    private Vector actionListeners = null;
    
    /**
     * a timer that gets the GUI to asyncronously update the graph based on 
     * the most recent values supplied by the setXXX() methods
     */
    private Timer update_timer;
    
    
    /** Creates new form ProgressDialog */
    public ProgressDialog() {
        super(Main.getApplicationFrame(), false);

        update_timer = new Timer(10, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateProgress();
            }});

        actionListeners = new Vector();
        initComponents();
        progressBar.setUI(new org.liquid.misc.ProgressBarUI());
        setIndeterminate(true);
        cancelButton.addActionListener(this);
    }

    /** Pops up the dialog and starts up the refresh timer */
    public void show() {
        super.show();
        update_timer.start();
    }

    /** 
     * Adds anybody who wants to know when the cancel button has been clicked
     *
     * @param the listener that wishes to be notified
     */
    public void addActionListener(ActionListener al) {
        actionListeners.add(al);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        displayPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        noteLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        
        setTitle("Progress");
        setName("Progress");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        displayPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        titleLabel.setText(" ");
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.insets = new java.awt.Insets(20, 20, 5, 20);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        displayPanel.add(titleLabel, gridBagConstraints1);
        
        noteLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        noteLabel.setText(" ");
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.insets = new java.awt.Insets(5, 20, 5, 20);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        displayPanel.add(noteLabel, gridBagConstraints1);
        
        progressBar.setPreferredSize(new java.awt.Dimension(250, 14));
        progressBar.setStringPainted(true);
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets(5, 20, 5, 20);
        displayPanel.add(progressBar, gridBagConstraints1);
        
        if (progressBar.isIndeterminate())
            progressLabel.setText("Please wait...");
        else
            progressLabel.setText("0 of 0 (0%)");
        progressLabel.setText("Please wait...");
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.insets = new java.awt.Insets(0, 0, 20, 0);
        displayPanel.add(progressLabel, gridBagConstraints1);
        
        getContentPane().add(displayPanel, java.awt.BorderLayout.CENTER);
        
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        
        buttonPanel.add(cancelButton);
        
        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog, cleans up GUI components and notifies anybody who's listening */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        ActionListener al;
        
        for (Enumeration e = actionListeners.elements(); e.hasMoreElements() ; ) {
            al = (ActionListener) e.nextElement();
            al.actionPerformed(new ActionEvent(this, 
                                               ActionEvent.ACTION_PERFORMED, 
                                               "closeDialog"));
        }
        setVisible(false);
        update_timer.stop();
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Getter for property title.
     * @return Value of property title.
     */
    public String getTitle() {
        return titleLabel.getText();
    }    

    /** Setter for property title.
     * @param title New value of property title.
     */
    public void setTitle(String title) {
        titleLabel.setText(title);
    }
    
    /** Getter for property note.
     * @return Value of property note.
     */
    public String getNote() {
        return noteLabel.getText();
    }
    
    /** Setter for property note.
     * @param note New value of property note.
     */
    public void setNote(String note) {
        noteLabel.setText(note+"...");
    }
    
    /** Getter for property minimum.
     * @return Value of property minimum.
     */
    public int getMinimum() {
        return progressBar.getMinimum();
    }
    
    /** Setter for property minimum.
     * @param minimum New value of property minimum.
     */
    public void setMinimum(int minimum) {
        progressBar.setMinimum(minimum);
    }
    
    /** Getter for property maximum.
     * @return Value of property maximum.
     */
    public int getMaximum() {
        return progressBar.getMaximum();
    }
    
    /** Setter for property maximum.
     * @param maximum New value of property maximum.
     */
    public void setMaximum(int maximum) {
        setIndeterminate(false);
        progressBar.setMaximum(maximum);
    }
    
    /** Getter for property progress.
     * @return Value of property progress.
     */
    public int getProgress() {
        return progress;
    }
    
    /** Setter for property progress.
     * @param progress New value of property progress.
     */
    public void setProgress(int progress) {
        this.progress = progress;
    }
    
    /** Adds 1 to the current progress indication */
    public void increment() {
        this.progress++;
    }
    
    /** Subtracts 1 from the current progress indication */
    public void decrement() {
        this.progress--;
    }

    /** Set the JProgressBar and label correctly */
    private void updateProgress() {
        int progress = getProgress();
        int maximum = getMaximum();
        if (isIndeterminate() && getProgress() == 0)
            progressLabel.setText("Please wait...");
        else if (isIndeterminate())
            progressLabel.setText(getProgress()+"");
        else 
            progressLabel.setText(progress +" of "+ maximum +" ("+((int)((float)progress/maximum*100))+"%)");
        progressBar.setValue(progress);
        progressBar.repaint();
    }

    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
        if (actionEvent.getSource() == cancelButton)
            this.closeDialog(null);
    }
    
    /** Getter for property indeterminate.
     * @return Value of property indeterminate.
     */
    public boolean isIndeterminate() {
        return progressBar.isIndeterminate();
    }
    
    /** Setter for property indeterminate.
     * @param indeterminate New value of property indeterminate.
     */
    public void setIndeterminate(boolean indeterminate) {
        progressBar.setIndeterminate(indeterminate);
        this.setProgress(0);
    }
    
    private int progress = 0;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel displayPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    // End of variables declaration//GEN-END:variables

}
