<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "document.dtd">
<document name="Venice">
<help>
To get help, click on any of the topics on the left.
If you click on any blue underlined text, it will take you to
the appropriate help section.

<para><link to="Introduction">Introduction</link> gives a brief
introduction to Venice.</para>

<para><link to="Preferences">Preferences</link> describes how
to customise Venice, including how Venice accesses stock
quotes.</para>

<para><link to="Importing Quotes">Importing Quotes</link> describes
how to import stock quotes into Venice.</para>

<para><link to="Tables">Tables</link> describes all the stock
quote tables that Venice can generate.</para>

<para><link to="Graphs">Graphs</link> describes all the graphs
that Venice can generate.</para>

<para><link to="Portfolio">Portfolio</link> describes how to keep track
of your portfolios in Venice.</para>

<para><link to="Gondola Language">Gondola Language</link> is a language for
analysing stock market data. The language allows you to do a variety of tasks
from listing stocks in tables that only match your criteria to creating
automated buy/sell paper trade rules.
</para>

<para><link to="Analysis">Analysis</link> describes some
of the more advance technical analysis that is available
in Venice. For charting see <link to="Graphs">Graphs</link>.
</para>
</help>

<text>Merchant of Venice, 0.3 alpha / 14/Mar/2004
===========================================

Copyright (C) 2003, Andrew Leppard (aleppard@picknowl.com.au)
See COPYING.txt for license terms.

</text>

<chapter name="Introduction">
<para>Thank you for trying Merchant of Venice (Venice).</para>

<para>Venice is a stock market trading programme that supports portfolio
management, charting, technical analysis, paper trading and
experimental methods like genetic programming. Venice runs in a
graphical user interface with online help and has full documentation.
Venice runs on UNIX, including Mac OS X and Windows.</para>

</chapter>

<chapter name="Preferences">
<help><para>Preferences describes the various settings that can be modified to customise
the way Venice works.</para>

<para><link to="Equations">Equations</link> describes how to get Venice to
remember functions or equations based on a keyword. This way instead of
typing in a long equation, such as a buy indicator, you could type in
a short name instead.</para>

<para><link to="Proxy">Proxy</link> describes how to configure Venice to work
with a web proxy. This allows you to download quotes from the Internet
through a web proxy.</para>

<para><link to="Quote Source">Quote Source</link> describes how to
configure Venice to read stock quotes from either files or from
a database.</para>

<para><link to="Tuning">Tuning</link> describes how to
configure Venice for optimal performance.</para>
</help>

<chapter name="Equations">
<para>You can store commonly used functions, such as indicators, so you do not
need to retype them. Once an equation is stored, you can access it from
any equation entry field by clicking on the small down arrow, which
appears next to all the equation entry fields. It will then display a list
of your stored equations.</para>

<para>You do not need to go to preferences to add, edit or delete stored equations.
Each equation entry field will display a menu if you right click on it.
It will give you the options to <highlight>Add</highlight>, <highlight>Edit</highlight>, <highlight>Delete</highlight>,
or <highlight>Manage</highlight>. Most of these options are self-explanatory; Manage
will display the equations preferences page.</para>

<para>You can reach the equations page by:</para>
<list><item>Clicking on the <highlight>File</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Preferences</highlight> menu item.
</item>
<item>Then selecting the <highlight>Equations</highlight> page.
</item>
</list>
</chapter>

<chapter name="Proxy">
<para>You can configure Venice to work with a web proxy. This allows
you to download quotes from the Internet through a web proxy. You can reach
the proxy configuration page by:</para>
<list><item>Clicking on the <highlight>File</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Preferences</highlight> menu item.
</item>
<item>Then selecting the <highlight>Proxy</highlight> page.
</item>
</list>
<para>To use the proxy, make sure the <highlight>Use Proxy</highlight> check box is
selected and enter the proxy host and port into the two fields.</para>
</chapter>

<chapter name="Quote Source">
<para>Venice currently supports three methods for reading in quotes. It can
read in quotes directly from files containing quotes in MetaStock,
EzyChart or Insight Trader. It can read in quotes stored in a MySQL or
PostgreSQL database. And finally it can read in some inbuilt sample quotes,
so you can test out Venice. Reading from files is quick and easy to set up -
but access is much slower than from database. It is recommended that you set
up access for files to start with and if you plan to use Venice to switch to
the database. </para>
<para>You can only access quotes directly from files, if each file
contains only a single day's worth of quotes. If any of your quote
files contain more than one date, you'll need to access your quote
files from the <link to="Database Quote Source">Database Quote Source</link> instead</para>
<para>You can reach the quote source configuration page by:</para>
<list><item>Clicking on the <highlight>File</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Preferences</highlight> menu item.
</item>
<item>Then selecting the <highlight>Quote Source</highlight> page.
</item>
</list>
<section name="File Quote Source">
<para>Once you have reached the quote source page, to tell Venice to read quotes
directly from files click on the <highlight>Files</highlight> tab and select the <highlight>Use Files</highlight>
radio button. You'll need to know the format of your quote files.
Venice supports the following:</para>
<list><item><para><highlight>MetaStock</highlight></para>
<para>      This format has 4 digit years and the quotes are in dollars. The first
      column is the symbol, then the date, open, high, low, close and volume.</para>
<para>      Example:</para>
<para><code>      XXX,19990715,1.73,1.82,1.71,1.81,3648921</code></para></item>
<item><para><highlight>MetaStock (volume/100)</highlight></para>
<para>      This format is the same as <highlight>MetaStock</highlight> above but the volume is divided
      by 100.</para>
<para>      Example:</para>
<para><code>      XXX,19990715,1.73,1.82,1.71,1.81,36489</code></para></item>
<item><para><highlight>Insight Trader</highlight></para>
<para>      This format has 2 digit years and quotes are in cents and volume is
      divided by 100. The first column is the symbol, then the date, open,
      high, low, close and volume.</para>
<para>      Example:</para>
<para><code>      XXX 07/15/99 173 182 171 181 36489</code></para></item>
<item><para><highlight>EzyChart</highlight></para>
<para>      This format has 2 digit years and quotes are in cents. The first column
      is the symbol, then the date, open, high, low, close and volume.</para>
<para><code>      XXX,990715,173,182,171,181,3648921</code></para></item></list>
<para>You can then tell Venice where the quotes files are by either adding them
here with the <highlight>Add</highlight> button or by using the <link to="Importing Quotes">Import Quotes</link> dialog.</para>
<para>You can only access quotes directly from files, if each file
contains only a single day's worth of quotes. If any of your quote
files contain more than one date, you'll need to access your quote
files from the <link to="Database Quote Source">Database Quote Source.</link> instead</para>
</section>
<section name="Database Quote Source">
<para>Once you have played with Venice for a while you might get annoyed at the time
it takes Venice to load quotes from files. You can fix this by reading quotes
from a database. Currently Venice only supports reading quotes from a
MySQL or a PostgreSQL database. To read quotes from a database, you'll need to
download a copy of the database and the relevant Java software driver (JDBC)
that lets Venice talk to the database.</para>

<para>You can download MySQL from http://www.mysql.com and you can also download
a software driver from them too. Their software driver is available at
http://www.mysql.com/downloads/api-jdbc-stable.html. Venice also supports
a software driver called <highlight>mm.mysql</highlight> which is available
from http://sourceforge.net/projects/mmmysql. Both are good, get either,
although I use the latter. Once the database is set up you'll need to create
a database for Venice, call the database <highlight>shares</highlight>.</para>

<para>Once all that is done, you'll need to configure Venice to use the database.
From the quote source page, to tell Venice to read quotes from the database
click on the <highlight>Database</highlight> tab and select the <highlight>Use Database</highlight>
radio button. You'll be confronted with several fields you need to fill in:</para>
<list><item><highlight>Database</highlight> - Select the database that you are using.
</item>
<item><highlight>Host</highlight> - This is the IP address of the computer that the database is
      running on. If it is running on the same machine as Venice, you can just
      put <highlight>localhost</highlight> here if you want.
</item>
<item><highlight>Port</highlight> - This is the port that the database is listening on.
      You shouldn't need to touch this.
</item>
<item><highlight>Username</highlight> - This is the user name that Venice will connect with in
      the database. You should have created a user/password pair when setting
      up the database.
</item>
<item><highlight>Password</highlight> - This is the password that Venice will connect with in
      the database. You should have created a user/password pair when setting
      up the database.
</item>
<item><highlight>Database Name</highlight> - This is the name of the database that you created
      earlier. You shouldn't need to touch this.
</item></list>
<para>Finally you'll need to import the quotes into the database, you can do this by
using the <link to="Importing Quotes">Import Quotes</link> dialog.</para>
<para>Good luck!</para>
<para>With the current version you might get an error message saying that it
can't find a table. If you get this, it probably means that you haven't
imported any quotes into Venice yet. Venice will automatically create its
required tables the first time you import quotes. For reference, this is
the format of the SQL shares table:</para>
<para><codeblock>+--------+---------+------+-----+------------+-------+
| Field  | Type    | Null | Key | Default    | Extra |
+--------+---------+------+-----+------------+-------+
| date   | date    |      | PRI | 0000-00-00 |       |
| symbol | char(6) |      | PRI |            |       |
| open   | float   | YES  |     | 0          |       |
| close  | float   | YES  |     | 0          |       |
| high   | float   | YES  |     | 0          |       |
| low    | float   | YES  |     | 0          |       |
| volume | int(11) | YES  |     | 0          |       |
+--------+---------+------+-----+------------+-------+
</codeblock></para>
</section>

<section name="Sample Quote Source">
<para>Venice has some inbuilt sample quotes, so you can test out Venice without
going to all the trouble of importing stock quotes. It contains a small
selection of quotes from the Australian Stock Exchange (ASX) from 1986.</para>
</section>
</chapter>

<chapter name="Tuning">
<para>The tuning page allows you to configure Venice for optimal performance.</para>
<para>You can reach the tuning configuration page by:</para>
<list><item>Clicking on the <highlight>File</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Preferences</highlight> menu item.
</item>
<item>Then selecting the <highlight>Tuning</highlight> page.
</item>
</list>

<para>Loading quotes from files or database can sometimes take a while. For
this reason Venice caches the quotes it reads in. That is, it keeps them in
memory so that if you want to view them again, they come up much faster.
By default Venice keeps up to about 100,000 quotes in memory at one time.
On this page you can view the number of quotes Venice is currently
caching and set the maximum amount. From time to time, Venice may need
to go a little higher than this amount.</para>
</chapter></chapter>

<chapter name="Importing Quotes">
<para>Before you import quotes, you'll need to decide whether Venice will read the
quotes directly from files or from a database. See <link to="Quote Source">Quote Source</link>
to set this all up.</para>
<para>You can reach the import quotes dialog by:</para>
<list><item>Clicking on the <highlight>File</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Import Quotes</highlight> menu item.
</item>
</list>
<para>This dialog is very versatile and lets you perform several import/export
operations:</para>

<section name="Import quote files into the Database">
<para>To perform this operation:</para>
<para>Click on <highlight>Files</highlight> in the <highlight>Import From</highlight> area and on <highlight>Database</highlight>
in the <highlight>Import To</highlight> area.</para>
<para>This allows you to import multiple quote files into the database in one
operation. Importing quotes into the database can take a while, so please be
patient. You need to select the quote type you are importing, see
<link to="Quote Source">Quote Source</link> for an explanation of these types.
When you click <highlight>Import</highlight> a dialog will come up and you can select
multiple quote files.</para>
</section>

<section name="Import quote files into Venice">
<para>To perform this operation:</para>
<para>Click on <highlight>Files</highlight> in the <highlight>Import From</highlight> area and on <highlight>Files</highlight>
in the <highlight>Import To</highlight> area.</para>
<para>This allows you to import multiple quote files into Venice in one
operation. This operation only tells Venice about the quote files, it doesn't
copy them in anyway - so if you delete the original quote files, Venice
obviously won't be able to access them anymore.</para>
</section>

<section name="Import quote files into Venice and the Database">
<para>To perform this operation:</para>
<para>Click on <highlight>Files</highlight> in the <highlight>Import From</highlight> area and on <highlight>Files</highlight>
and <highlight>Database</highlight> in the <highlight>Import To</highlight> area.</para>
<para>This operation performs the combination of the above two operations it will
import the files into the database and also into Venice. This is useful if
you access the files via the database, but would like Venice to be able to
cope if the database goes down.</para>
</section>

<section name="Import quotes from the Internet">
<para>To perform this operation:</para>
<para>Click on <highlight>Internet</highlight> in the <highlight>Import From</highlight> area and on <highlight>Files</highlight>
and/or <highlight>Database</highlight> in the <highlight>Import To</highlight> area.
Enter a comma or space separated list of symbols you wish to import and the
date ranges you wish to import.</para>
<para>This allows you to import quotes directly from the internet and store
them in the database and/or in quote files on your hard drive. If you need
to use a web proxy, you can configure it in Venice's <link to="Proxy">Preferences</link>.</para>
</section>

<section name="Export quote files from the Database">
<para>To perform this operation:</para>
<para>Click on <highlight>Database</highlight> in the <highlight>Import From</highlight> area and on <highlight>Files</highlight>
in the <highlight>Import To</highlight> area.</para>
<para>This allows you to export all the quote files from the database back into text
files. Each file will contain quotes for a single day. You'll need to specify
the format of the quotes in the file you want, see <link to="Quote Source">Quote Source</link>
for more details. You'll also need to specify the path and file name for the
generated files in the text box showing. Each file is named with the date
as part of it's file name, you'll need to specify the format of the date.</para>
<para>E.g.</para>
<list><item>/home/aleppard/quotes-mm-dd-yyyy.txt
      -> /home/aleppard/quotes-12-31-2002.txt
</item>
<item>/home/aleppard/market_ddMMMyy.txt
      -> /home/aleppard/market_31dec02.txt
</item>
<item>C:\Quotes\Quotes_d?_m?_yy.txt
      -> C:\Quotes\Quotes_1_5_02.txt
</item></list>
<para>What if the string <highlight>mm</highlight>, <highlight>dd</highlight>, <highlight>MMM</highlight> or <highlight>yy</highlight> appears in my
destination file but isn't meant to be part of the date string? Well it won't
work.</para>
</section>
</chapter>

<chapter name="Tables">
<para>Venice has the ability to list quote prices for a single day's trading in a
table, and the ability to list all quote prices for a list of given stocks.
When listing you need to decide which stocks you are interested in. Currently
you can select from <highlight>All Ordinaries</highlight>, <highlight>Market Indices</highlight> and <highlight>All Symbols</highlight>.
These categories are based on the ASX (Australian Stock Exchange) so might not
be very relevant for other exchanges. Currently Venice is very ASX-centric. At
the moment Venice does not have access to any data relating to the symbols it
is given, so it has to guess which category the symbol falls in. All
Ordinaries lists all 3 letter symbols except those starting with an <emphasis>X</emphasis>.
Market Indices lists all symbols starting with an <emphasis>X</emphasis>, on
the ASX almost all of these are market indices. All Symbols lists all the
symbols.</para>

<para>You can display a table by doing the following:</para>
<list><item>Clicking on the <highlight>Table</highlight> menu item.
</item>
<item>Then clicking on either <highlight>All Ordinaries</highlight>, <highlight>Market Indices</highlight>,
      <highlight>All Stocks</highlight> or <highlight>Stocks</highlight>.
</item>
<item>Then clicking on either <highlight>List All</highlight>, <highlight>List By Date</highlight>, <highlight>List By Rule</highlight> or
      <highlight>List By Symbols</highlight>.
</item>
</list>

<para>The <highlight>List All</highlight> option allows you to list all the stock quotes
on the given date.</para>

<para>The <highlight>List By Date</highlight> option allows you to specify the date of the stock
quotes to list.</para>

<para>The <highlight>List By Rule</highlight> option allows you to specify the initial
filter. The filter is an equation which specifies which stocks should be
listed and which hidden, see below for more details about this, also see the
<link to="Gondola Language">Gondola Language</link> for details about the format of
the equations.</para>

<para>The <highlight>List By Symbols</highlight> option allows you to specify the stock symbols
to list. Then all the quotes for those stock symbols will be listed.</para>

<section name="Apply Equations">
<para>You can run multiple equations against every stock listed in the table and
list the result of the equation. Click on the <highlight>Table</highlight> menu item, then
click on the <highlight>Apply Equations</highlight> menu item. This will bring up a dialog
where you can enter up to 5 equations that can be run against each stock. For
each you can enter the name of the column and the equation to be run. See
<link to="Gondola Language">Gondola Language</link> for details about the format of these equations.
Also see <link to="Preferences">Preferences</link> for how to get Venice to remember equations
so you don't have to keep typing them in all the time. To get you started, an
example equation is <code>avg(close, 30, 0)</code> which will calculate the average
day close value over the last 30 days, including today.</para>
</section>

<section name="Apply Filter">
<para>You can restrict which stocks are listed in the table by setting up an equation
filter. This equation is run against each stock listed in the table, if the
equation equates to true for a stock, then that stock is listed. Otherwise it
is hidden. You can reach this by clicking on the <highlight>Apply Filter</highlight> menu item.
Again, see <link to="Gondola Language">Gondola Language</link> for details about the format of these equations.
Also see <link to="Preferences">Preferences</link> for how to get Venice to remember equations so
you don't have to keep typing them in all the time. To get you started, an
example equation filter is <code>lag(close, 0) > lag(close, -1)</code> which will
list all quotes where the day close of today is higher than the day close of
the last trading day.</para>
</section>

<section name="General Table Features">
<para>Every table in Venice supports the following:</para>

<para>By clicking on a column header you can sort by that column, click again and
you reverse the sort. You can change the order of the columns by dragging a
column and dropping it into a new position.</para>

<para>Some tables in Venice support the following:</para>
<para>By right clicking on a row you can raise a context sensitive menu. If you
double click on a row the most common operation is invoked, typically
Graphing. Some tables also have a menu item <highlight>Show Columns</highlight> which lets
you specify which columns are shown.</para>
</section>
</chapter>

<chapter name="Watch Screens">
<para>Venice currently does not support real-time or intra-day quote data, but
it does support end-of-day watch screens. These watch screens are useful for
grouping and displaying stocks that are interesting. You can create a new
watch screen by doing the following:</para>
<list><item>Clicking on the <highlight>Table</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Watch Screen</highlight> menu item.
</item>
<item>Then clicking on the <highlight>New Watch Screen</highlight> menu item.
</item>
</list>
<para>This will create a new watch screen which you will need to name. You
can then add symbols that should be displayed in this watch screen.</para>
</chapter>

<chapter name="Graphs">
<section name="Portfolio Graphs">
<para>You can graph the value of any portfolio over time by doing the following:</para>
<list><item>Clicking on the <highlight>Graph</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Portfolio</highlight> menu item.
</item>
<item>Then clicking on the name of the portfolio you wish to graph.
</item>
</list>

<para>Depending on the size of your portfolio and the time it has existed, this
might take a while as Venice has to load in stock quotes for every stock
traded for every day of the portfolio.</para>

<para>Apart from graphing the value of the portfolio over time, you can also graph
the profit/loss of the portfolio. To do this, graph the portfolio as above,
then click on the menu item with the same name as your portfolio, then select
the <highlight>Graph</highlight> menu item and then click on <highlight>Profit/Loss</highlight>. The profit and loss
graph is calculated by ignoring any deposits and withdrawals made to the
portfolio, the balance of that portfolio over time will reflect the profit and
loss made.</para>
</section>

<section name="Market Indicator Charts">
<para>A market indicator is an indicator that can be used to help determine the
state of the market. They are calculated using multiple stocks on the market,
for example <highlight>Advance/Decline</highlight> uses all ordinary stocks in its calculations.</para>

<section name="Advance/Decline">
<para>Currently the only market indicator that Venice can graph is the
advance/decline indicator. You can graph this indicator by:</para>

<list><item>Clicking on <highlight>Graph</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Market Indicator</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Advance/Decline</highlight> menu item.
</item>
</list>
<para>This operation reads in almost all of the available stock quotes, so it might
be very slow.</para>
<para>The advance/decline indicator is calculated by taking an arbitrary start value
(currently 0). Each day's value is calculated by taking the number of stocks
that advanced (i.e. have a higher day close than day open) minus the number of
stocks that declined and adding that to the previous day's value. This creates
a cumulative graph whose trend may be used to give an indication of possible
future direction of the market.</para>
</section>
</section>

<section name="Stock Charts">

<para>Venice supports a variety of technical charts. See the literature
for how the meaning and how to interpret these charts.</para>

</section>
</chapter>

<chapter name="Portfolios">
<para>Venice allows you to keep track of multiple portfolios. One portfolio
might be for your actual portfolio and others could be used for paper
trading. You can create a new portfolio by:</para>
<list><item>Clicking on the <highlight>Files</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Portfolio</highlight> menu item.
</item>
<item>Then clicking on the <highlight>New Portfolio</highlight> menu item.
</item>
</list>
<para>A portfolio is made up of several <highlight>Cash Accounts</highlight> and several
<highlight>Share Accounts</highlight>. A <highlight>Cash Account</highlight> can be a bank account, a term deposit,
a Cash Management Account or any account which stores money. A <highlight>Share Account</highlight>
is any account where you can trade shares. To create a trading account you
will need at least one of each.</para>
<para>A portfolio is made up of several accounts and also transactions. A
transaction is any financial transaction that involves one or more of the
accounts. See transactions for more details.</para>
<section name="Import/Export">
<para>You can import and export portfolios to CSV files (comma separated values)
these files can then be read by an Excel spreadsheet and other tools. This
can be useful for backup purposes. Venice is alpha after all! The format of
the output files is:</para>
<para><code>dd/mm/yyyy,transaction name,value,symbol,share number,trade cost,cash
account1,cash account2,share account</code></para>
<para>Not all of these fields will be present, an example exported line is:</para>
<para><code>02/01/2003,Accumulate,4000.00,XYZ,100,20.50,Bank,,Broker</code></para>
</section>

<section name="Graph">
<para>You can graph the value of a portfolio over time. See <link to="Graphs">Graphs</link>
for more details.</para>
</section>

<section name="Transaction History">
<para>You can view a list of all the transactions that have occurred in the
portfolio. You can reach this by clicking on the <highlight>Transaction</highlight> menu
item and then clicking on the <highlight>Show History</highlight> menu item.</para>
</section>

<section name="Transactions">
<para>Venice currently supports several common transactions:
<highlight>Accumulate Transaction</highlight>, <highlight>Deposit Transaction</highlight>, <highlight>Dividend Transaction</highlight>,
<highlight>Dividend DRP Transaction</highlight>, <highlight>Fee Transaction</highlight>, <highlight>Interest Transaction</highlight>,
<highlight>Reduce Transaction</highlight>, <highlight>Transfer Transaction</highlight> and <highlight>Withdrawal Transaction</highlight>.</para>

<para>Once a portfolio is open, you can add a transaction by clicking on the
<highlight>Transaction</highlight> menu item, then clicking on the <highlight>New</highlight> menu item.
You will see in a drop down box a list of the transactions available. Some of
these might not be available yet, e.g. you cannot enter a Reduce Transaction
(sell shares) without having bought any.</para>

<subsection name="Accumulate Transaction">
<para>The accumulate transaction is the "buy shares" transaction. To enter this
transaction you will need the date the transaction took place, the cash
account where you withdrew the money from, the share account that accumulated
the shares, the symbol of the stock you accumulated (e.g. CBA), the number of
shares you accumulated, the total value of the shares at the time of purchase
and finally the cost of the trade. This information should all be available
from your broker.</para>
</subsection>

<subsection name="Deposit Transaction">
<para>The deposit transaction is the transaction where you
deposit money into a cash account such as a bank account. To enter this
transaction you will need the date the transaction took place, the cash
account you deposited the money to and the amount you deposited.</para>
</subsection>

<subsection name="Dividend Transaction">
<para>The dividend transaction is the transaction when you receive a share
dividend. To enter this transaction you will need the date the transaction
took place, the cash account that received the money, the share account
containing the stock, the symbol of the stock and the dividend amount paid to
you.</para>
</subsection>

<subsection name="Dividend DRP Transaction">
<para>The dividend DRP (dividend re-investment programme) transaction is the
transaction when you receive a share dividend that is automatically
re-invested back into the company by buying more shares. To enter this
transaction you will need the date the transaction took place, the
share account containing the stock, the symbol of the stock and the amount
of shares acquired.</para>
</subsection>

<subsection name="Fee Transaction">
<para>The fee transaction is the transaction when you receive any kind of
fee such as account keeping fees, Tax etc. To enter this transaction you
will need the date the transaction took place, the cash account that
received the fee and the amount that you were charged.</para>
</subsection>

<subsection name="Interest Transaction">
<para>The interest transaction is the transaction when you receive any
interest in one of your cash accounts. To enter this transaction you will
need the date the transaction took place, the cash account that received
the interest and the amount that you were credited. If your account is in
the negative and this was the interest that was debited from your account,
then put a minus sign in front of the value.</para>
</subsection>

<subsection name="Reduce Transaction">
<para>The reduce transaction is the "sell shares" transaction. To enter this
transaction you will need the date the transaction took place, the cash
account where the money from the sale will go, the share account that
reduced the shares, the symbol of the stock you reduced (e.g. CBA), the
number of shares you reduced, the total value of the shares at the time of
sale and finally the cost of the trade. This information should all be
available from your broker.</para>
</subsection>

<subsection name="Transfer Transaction">
<para>The transfer transaction is the transaction where you transfer money from
one cash account to another. To enter this transaction you will need the
cash account where you withdrew the money, the destination cash account and
the amount you transferred. If there was a fee for the transfer, you need
to enter this as a separate transaction.</para>
</subsection>

<subsection name="Withdrawal Transaction">
<para>The withdrawal transaction is the transaction where you
withdraw money from a cash account such as a bank account. To enter this
transaction you will need the date the transaction took place, the cash
account you withdrew the money from and the amount you withdrew.</para>
</subsection>
</section>

</chapter>

<chapter name="Gondola Language">
<para>The <highlight>Gondola Language</highlight> is a language for analysing stock market data.
The language allows you to do a variety of tasks from listing stocks in tables
that only match your criteria to creating automated buy/sell paper trade rules.
The language is closely modelled after the C programming language, so if you
know that language, then you should find Gondola easy and familliar to
work with.
</para>

<para>Whenever you enter a Gondola expression there are two implicit variables that
are always set: the current date and the current stock. For example if
you are displaying a <link to="Tables">Table</link> of stock quotes, you can execute an
equation for each stock. If you entered this line:</para>

<para><code>avg(close, 30)</code></para>

<para>It would display, for each stock, the average day close value over the last
30 days starting from today. Here the current date would be set to the most
recent day you have a quote for and the current stock would be set to the
current stock.</para>

<para>You can also enter equations when performing <link to="Analysis">Paper Trading</link>. If you
entered the following as a buy rule:</para>

<para><code>avg(close, 15) &gt; avg(close, 30, -1)</code></para>

<para>It would only buy the stock when the average day close over the last 15 days
was higher than the average day close of over the last 30 days, where the
30 day average would be calculated starting from the previous day and working
backwards. So here the current date would be set to whatever date the trade
was to be analysed for.</para>

<para>The Gondola language is very type strict. What this means is that each value
has a given type, whether it is an <highlight>integer</highlight>, <highlight>real</highlight> or <highlight>boolean</highlight>. This means
that the numbers <code>12</code> and <code>12.0</code> are different, and <code>1</code> and <code>true</code>
are different. If you get a type mismatch error, you've probably entered an
<highlight>integer</highlight> number (e.g. <code>12</code>) instead of a <highlight>real</highlight> number (e.g. <code>12.0</code>).</para>

<section name="Gondola Operators">
<para>The Gondola language supports the following boolean operators: <highlight>and</highlight>, <highlight>or</highlight>
and <highlight>not</highlight>. For example:</para>

<list><item><code>close &gt; 12.0 or open &gt; 12.0
</code></item>
<item><code>close &gt; 12.0 and open &gt; 12.0
</code></item>
<item><code>not(avg(open, 15) &gt; 12.0)
</code></item>
</list>

<para>It also supports basic arithmetic: +, -, * and /. For example:</para>
<list><item><code>close + lag(close, -1)
</code></item>
<item><code>close - lag(close, -1)
</code></item>
<item><code>close / lag(close, -1)
</code></item>
<item><code>close * lag(close, -1)
</code></item>
</list>
<para>And finally it also supports the relational operators: <highlight>==</highlight>, <highlight>&gt;</highlight>, <highlight>&gt;=</highlight>, <highlight>&lt;</highlight>,
<highlight>&lt;=</highlight> and <highlight>!=</highlight>. For example:</para>
<list><item><code>volume == lag(volume, -1)
</code></item>
<item><code>close &gt; lag(close, -1)
</code></item>
<item><code>close &gt;= lag(close, -1)
</code></item>
<item><code>close &lt; lag(close, -1)
</code></item>
<item><code>close &lt;= lag(close, -1)
</code></item>
<item><code>volume != lag(volume, -1)
</code></item>
</list>
</section>

<section name="Gondola Variables">
<para>The Gondola language has full support for variables, which allow you to
store, retrieve and manipulate values. When defining a new variable you
need to specify whether the variable can change or is constant, the variable
type, the name of the variable and optionally the initial value of the
variable.</para>
<para>Examples:</para>
<list><item><code>int averageValue
</code></item>
<item><code>const boolean myValue = true
</code></item>
<item><code>float averageValue = 10.0*12.0
</code></item>
</list>
</section>

<section name="Gondola Functions">
<section name="Absolute Value">
<para>The absoluate value function returns the absolute value of the given value.
The absolute value is the positive value of a number. For example the absolute
value of -12 is 12, and the absolute value of 12 is 12.</para>
<para><code>abs(VALUE)</code></para>
<para>Where VALUE is the initial value.</para>
<para>Example:</para>
<para><code>abs(-28.0)</code></para>
<para>Returns the absolute value of -28.0 which is 28.0.</para>
</section>

<section name="Average">
<para>The average function averages a series of stock quotes.</para>
<para><code>avg(QUOTE, DAYS, [START_OFFSET])</code></para>
<para>Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>, <highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where DAYS is the number of days to average.
Where START_OFFSET is the most recent date to average, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>avg(open, 15, -1)</code></para>
<para>Returns the average of the day open value for the current stock for the last
15 days, ending with yesterday.</para>
</section>

<section name="Correlation">
<para>The correlation function returns the correlation between two stock
quotes.</para>
<para><code>corr(SYMBOL, QUOTE, DAYS, [START_OFFSET])</code></para>
<para>Where SYMBOL is the stock symbol. Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>,
<highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where DAYS is the number of days to correlate.
Where START_OFFSET is the most recent date to correlate, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>corr("CBA", close, 30, -1)</code></para>
<para>Returns the correlation of the day close values of this stock and
CBA over 30 days ending in yesterday.</para>
</section>

<section name="Day">
<para>The day function returns the current day of the month.</para>
<para><code>day()</code></para>
<para>Example:</para>
<para><code>day()</code></para>
<para>Returns the current day, which will be 31, if it is the 31st.</para>
</section>

<section name="Day of Week">
<para>The day of week function returns the current day of the week.</para>
<para><code>dayofweek()</code></para>
<para>Example:</para>
<para><code>dayofweek()</code></para>
<para>Returns the current day of the week, which will be 1, if it is a Sunday.</para>
</section>

<section name="Day of Year">
<para>The day of year function returns the current day of the year.</para>
<para><code>dayofyear()</code></para>
<para>Example:</para>
<para><code>dayofyear()</code></para>
<para>Returns the current day of the year, which might be 365, if it is New Years Eve.</para>
</section>

<section name="For">
<para>The for function is a looping function that allows you to loop over
an expression of code. Typically the loop is tied to a variable, so you
need to set the initial value of the variable, a condition where the loop
will terminate, and how the variable should change after each loop.</para>
<para><code>for(INITIAL; CONDITION; LOOP) { COMMAND }</code></para>
<para>The function will execute the INITIAL expression, then execute
the COMMAND expression, and then execute the LOOP expression. It will
then execute the CONDITION expression. If the CONDITION expression
was FALSE then the function will return. Otherwise it will run the
COMMAND expression, then the LOOP expression, then check the CONDITION
expression, etc.</para>
<para>Example:</para>
<para><codeblock>int b = 0

for(int i = 0; i &lt; 10; i = i + 1) {
  b = b + i
}
</codeblock></para>
<para>The above code will sum the numbers 0, 1, 2, ... 9 and store the result
in the b variable.</para>
</section>

<section name="If">
<para>The if function allows a selection of which code to be executed.</para>
<para><code>if(VALUE) { TRUE } else { FALSE }</code></para>
<para>If the value of the VALUE expression is true, then the TRUE expression
will be executed, otherwise the FALSE expression will be.</para>
<para>Example:</para>
<para><codeblock>if(lag(open, 0) &gt; lag(open, -1)) {
   lag(open, 0)
}
else {
   lag(open, -1)
}</codeblock></para>
<para>Returns the greater of today and yesterday's day open values.</para>
</section>

<section name="Lag">
<para>The lag function returns a stock quote.</para>
<para><code>lag(QUOTE, [OFFSET])</code></para>
<para>Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>, <highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where OFFSET is the date to retrieve the stock quote, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>lag(high, -5)</code></para>
<para>Returns the day high value of the current stock, 5 days previous.</para>
<para>The expression <code>lag(close, 0)</code> is the same as <code>lag(close)</code> and they can both be
abbreviated to <code>close</code>; simillarly for <code>open</code>, <code>high</code> and <code>low</code>.</para>
</section>

<section name="Minimum">
<para>The minimum function finds the minimum of a series of stock quotes.</para>
<para><code>min(QUOTE, DAYS, [START_OFFSET])</code></para>
<para>Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>, <highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where DAYS is the number of days to search.
Where START_OFFSET is the most recent date to search, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>min(volume, 15, -1)</code></para>
<para>Returns the minimum volume of trade for the current stock for the last
15 days, ending with yesterday.</para>
</section>

<section name="Maximum">
<para>The maximum function finds the maximum of a series of stock quotes.</para>
<para><code>max(QUOTE, DAYS, [START_OFFSET])</code></para>
<para>Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>, <highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where DAYS is the number of days to search.
Where START_OFFSET is the most recent date to search, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>max(volume, 15, -1)</code></para>
<para>Returns the maximum volume of trade for the current stock for the last
15 days, ending with yesterday.</para>
</section>

<section name="Month">
<para>The month function returns the current month.</para>
<para><code>month()</code></para>
<para>Example:</para>
<para><code>month()</code></para>
<para>Returns the current month, which will be 8, if it is August.</para>
</section>

<section name="Percent">
<para>The percent function returns the given percent of the given value.</para>
<para><code>percent(VALUE, PERCENT)</code></para>
<para>Where VALUE is the initial value and PERCENT is the ratio to return.</para>
<para>Example:</para>
<para><code>percent(200, 10)</code></para>
<para>Returns 10% of 200 which is 20.</para>
</section>

<section name="Relative Strength Index">
<para>This function calculates the Relative Strength Index (RSI) of the current stock.</para>
<para><code>rsi([PERIOD, [START_OFFSET]])</code></para>
<para>Where PERIOD is the period to apply the RSI.
Where START_OFFSET is the most recent date to calculate, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>rsi()</code></para>
<para>Returns the RSI of the current stock.</para>
</section>

<section name="Square Root">
<para>The square root function returns the square root of the given value.</para>
<para><code>sqrt(VALUE)</code></para>
<para>Where VALUE is the initial value.</para>
<para>Example:</para>
<para><code>sqrt(144)</code></para>
<para>Returns the square root of 144 which is 12.</para>
</section>

<section name="Sum">
<para>The sum function sums a series of stock quotes.</para>
<para><code>sum(QUOTE, DAYS, [START_OFFSET])</code></para>
<para>Where QUOTE is <highlight>open</highlight>, <highlight>close</highlight>, <highlight>low</highlight>, <highlight>high</highlight> or <highlight>volume</highlight>.
Where DAYS is the number of days to sum.
Where START_OFFSET is the most recent date to sum, 0 means the current
trading date, -1 means the previous trading date, etc.</para>
<para>Example:</para>
<para><code>sum(open, 15, -1)</code></para>
<para>Returns the sum of the day open value for the current stock for the last
15 days, ending with yesterday.</para>
</section>

<section name="While">
<para>The while function is a looping function that allows you to loop over an
expression of code. The loop contains an expression that will be executed until
a specific condition is not met.</para>
<para><code>while(CONDITION) { COMMAND }</code></para>
<para>The function will execute the COMMAND expression until the CONDITION
is not met. If the CONDITION is never met, the loop will not be entered.</para>
<para>Example:</para>
<para><codeblock>int sum = 1

while(sum &lt; 100) {
  sum = sum + 1
}
</codeblock></para>
<para>The above code will keep increment the value of sum until it is equal to 100.</para>
</section>

<section name="Year">
<para>The year function returns the current year.</para>
<para><code>year()</code></para>
<para>Example:</para>
<para><code>year()</code></para>
<para>Returns the current year, which will be 2004, if it is 2004.</para>
</section>
</section>
</chapter>

<chapter name="Analysis">
<help><para>The analysis section describes the various analysis functions that Venice
provides.</para>

<para><link to="Paper Trade">Paper Trade</link> describes how to perform historical
paper trading, this allows you to test buy/sell rules using historical share
data.</para>

<para><link to="Genetic Programming">Genetic Programming</link> describes how to use
evolutionary computation to evovle new buy/sell rules.</para>
</help>

<chapter name="Paper Trade">
<para>Venice allows you to perform historical paper trading, this allows you to test
buy/sell rules using historical share data. You need to enter basic data such
as which shares you wish to trade (either from a select list or say all
ordinary shares), the buy/sell rules you wish to trigger the trades, the date
range over which to trade, and the initial capital. Venice will then pretend
to buy and sell shares over that time range and will generate a portfolio
detailing all its trades and the final portfolio value. You can bring up
the paper trade dialogue by:</para>
<list><item>Clicking on the <highlight>Analysis</highlight> menu item.
</item>
<item>Then clicking on the <highlight>Paper Trade</highlight> menu item.
</item>
</list>
<section name="The Range Page">
<para>The range page defines the range and order of the paper trade. The
<highlight>Date Range</highlight> defines the range of dates that the paper trade will be
active. The <highlight>Symbols</highlight> field defines which symbols the paper trade will be
restricted to. You can either use the set groups such as <highlight>All Ordinaries</highlight>
or you can enter any specific set of symbols. For each day that the paper
trade runs, it will iterate through all the symbols it is allowed to
trade. For each symbol, it will run the buy rule to see if it triggers a
trade. If the paper trade has no more money left to purchase shares for
that day, it will move to the next day. If you want to control the order
that the paper trade iterates through the symbols, you can using the
<highlight>Order Symbols</highlight> options. You can either order the
symbols by the given options, or by entering an equation.</para>
<para>Some example values:</para>
<list><item>Start Date: 3/1/2000
</item>
<item>End Date: 24/1/2001
</item>
<item>Symbols: ANZ WBC CBA NAB
</item>
<item>By: Change Decreasing
</item>
</list>
</section>
<section name="The Rules Page">
<para>The rules page defines the buy/sell rules that trigger trades. Venice
supports the concept of <highlight>Rule Famillies</highlight>. The idea is that you
might want to try several hundred very similar equations.
For example, if you wanted to trigger a buy on a moving average, you might
have the following buy equation:
<code>avg(close, 15, 0) > avg(close, 30, 0)</code>. But what if you wanted
to try not only 15 and 30, but all the values up to 100? You could do this
by entering the equation: <code>avg(close, a, 0) > avg(close, b, 0)</code>.
Then making sure the <highlight>Enable multiple rules</highlight> checkbox is ticked.
Then entering the maximum values for <code>a</code> and <code>b</code> into the <highlight>Range</highlight> entries.</para>
<para>Venice makes two additional variables available to paper trade equations:</para>
<list><item><code>held</code> - defines the number of days that the stock has been
      held.
</item>
<item><code>order</code> - if you selected any order besides <highlight>No Real Order</highlight> this variable
      will be available. It will be set to the order that the symbol is
      analysed by the paper trade. If it is the first symbol analysed, then
      <code>order</code> will be set to 0. For example, if you are ordering
      by volume decreasing, the stock with the highest volume will be
      analysed first, and the <code>order</code> variable will be set to 0.
</item>
</list>
<para>Some example values:</para>
<list><item>Buy Rule: <code>order == 0
</code></item>
<item>Sell Rule: <code>order &lt; a || held &gt; b
</code></item>
<item>Enable multiple fules: Ticked
</item>
<item>Range a: 1 to: 10
</item>
<item>Range b: 1 to: 50
</item>
<item>Range c: 1 to: leave empty
</item>
</list>
</section>
<section name="The Portfolio Page">
<para>The portfolio page defines the portfolio that is used when paper trading. You
need to enter the <highlight>initial capital</highlight> that the portfolio has before it starts
trading, and a value for a fixed <highlight>Trade Cost</highlight>.
Next you need to decide how many stocks the portfolio can contain. You
can specify either a fixed <highlight>Number of Stocks</highlight>, in which case Venice works out
the average value of each stock. Or you can specify the <highlight>Stock Value</highlight>, in which
case Venice works out the maximum number of stocks.</para>
<para>Some example values:</para>
<list><item>Initial Capital: 400000
</item>
<item>Trade Cost: 25
</item>
<item>Number of Stocks: 1
</item>
</list>
</section>
</chapter>

<chapter name="Genetic Programming">
<para>Venice supports using evolutionary computation to create new buy/sell rules
based on historical data. The way it works is that Venice initially creates a
set of random buy/sell rule equations. A pair of buy/sell rule equations is
refered to as an individual. It will then use algebraic simplification
to reduce the size of the individual's equations and also to remove any
unecessary computation. It will then check the individual's equations using a
few simple rules, e.g. is the equation big enough to be meaningful?
Is the equation not too large? If the individual's equations look like they
could be meaningful, it will paper trade with them, in the same method as the
<link to="Paper Trade">Paper Trade Module</link>. If the individual makes a loss or beaks even,
then it will be immediately rejected.</para>

<para>Once Venice has created a set of these random individuals, it will then
move onto the second generation. For this generation it will pick two
random individuals (with a strong bias to the better performing individuals)
and combine them, using a combination of cross-over and mutation, to create
a new individual. This process is refered to as breeding. It will again apply
algebraic simplification to the resultant individual's equations. It will
then paper trade this new individual. If the new individual has a greater
return than any of the previous individuals, it will be recorded. Venice will
then repeat this process, creating several new individuals. The number of
individuals created is refered to as the popluation. The number of the
highest returning individuals created which are bred in the next generation,
is refered to as the breeding population.</para>

<para>Once a given number of individuals have been created, Venice will then move
onto the third generation. Here, it is the same as the second generation,
except that instead of breeding from the random individuals that were
initially created, it will breed from individuals created that were bred
from the random individuals. Each generation then breeds from the
individuals bred from the last generation.</para>

<para>While equations created from Genetic Programming can give fantastic
returns on historical data, they unfortunately do not transfer directly to
different date and symbol ranges, than the ones that they were created with.
However, it is an experimental technique to see whether they can actually
come up with any principles that can be generally applied.</para>

<section name="The Range Page">
<para>This is the same as the range page in the <link to="Paper Trade">Paper Trade Module</link>.</para>
</section>

<section name="The Portfolio Page">
<para>This is the same as the portfolio page in the <link to="Paper Trade">Paper Trade Module</link>.</para>
</section>

<section name="The GP Page">
<para>The Genetic Programme (GP) page defines the Genetic Programme settings.
Currently you can set the number of <highlight>Generations</highlight> to run. You can
set the <highlight>Population</highlight> size, you can set the <highlight>Breeding Population</highlight>
and you can set the <highlight>Display Population</highlight>. The display population is
the number of highest returning individuals that are displayed when that
generation has completed.</para>
<para>Some example values:</para>
<list><item>Generations: 50
</item>
<item>Population: 10000
</item>
<item>Breeding Population: 250
</item>
<item>Display Population: 5
</item>
</list>
</section>
</chapter>
</chapter>
</document>
